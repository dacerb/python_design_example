from copy import deepcopy
from typing import Optional, Dict, AnyStr

from example_compliance_engine.compliance_engine.chain_handler import ChainHandler, HandlerSummaryVulnerabilityProtocol



class VulnerabilityHigh(ChainHandler):
    def handler(self, request):

        self.summary_body: HandlerSummaryVulnerabilityProtocol = HandlerSummaryVulnerabilityProtocol()
        key_class: Optional[AnyStr] = self.__class__.__name__
        summary: Optional[Dict] = {}

        try:
            self.process(request)

        except Exception as e:
            print(f"problems with {key_class} validation")
            raise e

        finally:
            summary[key_class]: dict = self.summary_body.to_json

        if self._next_handler:
            result_summary = self._next_handler.handler(request)
            summary.update(result_summary)

        return summary

    def process(self, request) -> None:
        high_vulnerability: dict = request.get("vulnerabilidades", {}).get("high", {})
        copy_high_vulnerability = deepcopy(high_vulnerability)
        exception_vulnerabilities: dict = request.get("exceptions_app_rule",{}).get("high", {})

        self.summary_body.compliance = True
        self.summary_body.qty = len(high_vulnerability)
        self.summary_body.vulnerability_list = high_vulnerability
        self.summary_body.detail = f"high_vulnerability: {len(high_vulnerability)} is invalid"

        set_endpoints_vulnerabilities = set(list(high_vulnerability.keys()))
        set_exception_vulnerabilities = set(exception_vulnerabilities)

        if not set_endpoints_vulnerabilities - set_exception_vulnerabilities:
            high_vulnerability = {}
            self.summary_body.excepted_vulnerability.update(copy_high_vulnerability)

        key_list_apps_not_excepted = list(set_endpoints_vulnerabilities - set_exception_vulnerabilities)

        if len(key_list_apps_not_excepted):
            aux: dict = {}
            aux_excepted = {}
            for key, value in copy_high_vulnerability.items():
                if key in key_list_apps_not_excepted:
                    aux.update({key: value})
                else:
                    aux_excepted.update({key: value})


            self.summary_body.vulnerability_list = aux
            self.summary_body.excepted_vulnerability = aux_excepted
            self.summary_body.compliance = False
